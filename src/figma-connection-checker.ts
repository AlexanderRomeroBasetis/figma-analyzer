import * as dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

interface FigmaUser {
    id: string;
    email: string;
    handle: string;
    img_url: string;
}

interface FigmaApiResponse {
    user?: FigmaUser;
    error?: string;
}

export class FigmaConnectionChecker {
    private readonly token: string;
    private readonly baseUrl: string;

    constructor() {
        this.token = process.env.TOKEN || '';
        this.baseUrl = process.env.BASE_URL || 'https://api.figma.com';
    }

    /**
     * Valida que las variables de entorno necesarias est√©n configuradas
     */
    private validateEnvironment(): boolean {
        console.log('üîç Verificando configuraci√≥n...');
        
        const checks = [
            { name: 'BASE_URL', value: this.baseUrl, required: true },
            { name: 'TOKEN', value: this.token, required: true },
            { name: 'PROJECT_URL', value: process.env.PROJECT_URL, required: false },
            { name: 'FRONTEND_URL', value: process.env.FRONTEND_URL, required: false }
        ];

        let allValid = true;

        checks.forEach(check => {
            if (check.required && !check.value) {
                console.log(`‚ùå ${check.name} no est√° configurado (requerido)`);
                allValid = false;
            } else if (check.value) {
                console.log(`‚úÖ ${check.name} configurado correctamente`);
            } else {
                console.log(`‚ö†Ô∏è  ${check.name} no est√° configurado (opcional)`);
            }
        });

        return allValid;
    }

    /**
     * Realiza una petici√≥n de prueba a la API de Figma para verificar la conexi√≥n
     */
    async checkConnection(): Promise<boolean> {
        console.log('\nüöÄ Iniciando prueba de conexi√≥n a Figma API...\n');

        // Validar configuraci√≥n antes de hacer la petici√≥n
        if (!this.validateEnvironment()) {
            console.log('\n‚ùå Configuraci√≥n incompleta. No se puede continuar.');
            return false;
        }

        try {
            console.log('\nüì° Conectando a Figma API...');
            
            const response = await fetch(`${this.baseUrl}/v1/me`, {
                method: 'GET',
                headers: {
                    'X-Figma-Token': this.token,
                    'Content-Type': 'application/json'
                }
            });

            console.log(`üìä C√≥digo de respuesta: ${response.status}`);

            if (response.status === 200) {
                const data = await response.json() as FigmaApiResponse;
                
                console.log('‚úÖ ¬°Conexi√≥n exitosa!');
                console.log('\nüë§ Informaci√≥n del usuario:');
                
                if (data.user) {
                    console.log(`   üìß Email: ${data.user.email}`);
                    console.log(`   üÜî ID: ${data.user.id}`);
                    console.log(`   üë§ Handle: ${data.user.handle}`);
                    console.log(`   üñºÔ∏è  Avatar: ${data.user.img_url}`);
                }

                return true;
            } else {
                console.log('‚ùå Error en la conexi√≥n');
                
                try {
                    const errorData = await response.json() as any;
                    console.log(`   Error: ${errorData.error || 'Error desconocido'}`);
                } catch {
                    const errorText = await response.text();
                    console.log(`   Error: ${errorText || 'Error desconocido'}`);
                }

                this.suggestSolutions(response.status);
                return false;
            }

        } catch (error) {
            console.log('‚ùå Error de conexi√≥n:', error);
            console.log('\nüí° Posibles soluciones:');
            console.log('   - Verificar conexi√≥n a internet');
            console.log('   - Comprobar que la URL base sea correcta');
            console.log('   - Verificar configuraci√≥n de proxy/firewall');
            
            return false;
        }
    }

    /**
     * Sugiere soluciones basadas en el c√≥digo de error HTTP
     */
    private suggestSolutions(statusCode: number): void {
        console.log('\nüí° Posibles soluciones:');
        
        switch (statusCode) {
            case 401:
                console.log('   - Verificar que el token de Figma sea v√°lido');
                console.log('   - Comprobar que el token no haya expirado');
                console.log('   - Regenerar el token en la configuraci√≥n de Figma');
                break;
            case 403:
                console.log('   - Verificar permisos del token');
                console.log('   - Comprobar que el token tenga acceso al recurso');
                break;
            case 404:
                console.log('   - Verificar que la URL base sea correcta');
                console.log('   - Comprobar el endpoint de la API');
                break;
            case 429:
                console.log('   - L√≠mite de rate limiting alcanzado');
                console.log('   - Esperar antes de hacer otra petici√≥n');
                break;
            case 500:
            case 502:
            case 503:
                console.log('   - Error del servidor de Figma');
                console.log('   - Intentar m√°s tarde');
                break;
            default:
                console.log('   - Revisar documentaci√≥n de la API de Figma');
                console.log('   - Verificar configuraci√≥n del token');
        }
    }

    /**
     * Ejecuta todas las verificaciones de conexi√≥n
     */
    async runAllChecks(): Promise<void> {
        console.log('üîß Figma Connection Checker');
        console.log('==========================\n');

        const isConnected = await this.checkConnection();

        console.log('\nüìã Resumen:');
        console.log(`   Estado de conexi√≥n: ${isConnected ? '‚úÖ CONECTADO' : '‚ùå ERROR'}`);
        console.log(`   Timestamp: ${new Date().toISOString()}`);
        console.log('\n==========================');
    }
}

// Funci√≥n principal para ejecutar las pruebas
async function main() {
    const checker = new FigmaConnectionChecker();
    await checker.runAllChecks();
}

// Ejecutar si el archivo se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(console.error);
}

export default FigmaConnectionChecker;
